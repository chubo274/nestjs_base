// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch", "fullTextIndex"]
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum UserStatus {
  ACTIVE
  DELETED
  BANNED
}

enum UserRole {
  ADMIN
  MANAGER
  STAFF
}

model User {
  id                   Int                    @id @default(autoincrement())
  username             String                 @unique @db.VarChar(255)
  phone                String                 @unique @db.VarChar(255)
  email                String                 @unique @db.VarChar(255)
  name                 String                 @db.VarChar(255)
  password             String?
  lastAccessToken      String?                @db.Text
  fcmToken             String?                @db.Text
  nickName             String?                @db.VarChar(255)
  avatar               String?                @db.VarChar(255)
  role                 UserRole               @default(STAFF)
  status               UserStatus             @default(ACTIVE)
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at")
  // relation
  NotificationLogsWith NotificationLogsWith[]
  NotificationLogs     NotificationLogs[]

  @@fulltext([username, email, phone, name, nickName])
  @@map("user")
}

model NotificationLogs {
  id                   Int                    @id @default(autoincrement())
  title                String                 @db.VarChar(1000) // notification.title in noti firebase
  subTitle             String?                @db.VarChar(1000)
  imageUrl             String?                @db.VarChar(1000) // notification.imageUrl in noti firebase
  body                 String?                @db.Text // notification.body in noti firebase
  data                 String? // data in noti firebase
  userCreatedId        Int
  type                 String                 @default("DEFAULT") // NotiType
  createdAt            DateTime               @default(now()) @map("created_at")
  updatedAt            DateTime               @default(now()) @updatedAt @map("updated_at")
  // relation fields
  NotificationLogsWith NotificationLogsWith[]
  UserCreated          User                   @relation(fields: [userCreatedId], references: [id], onDelete: Cascade)

  @@map("notification_logs")
}

model NotificationLogsWith {
  id               Int              @id @default(autoincrement())
  notificationId   Int
  userReceiveId    Int // userId is user. That is user has accessed app or just specific user
  isRead           Boolean          @default(false)
  createdAt        DateTime         @default(now()) @map("created_at")
  updatedAt        DateTime         @default(now()) @updatedAt @map("updated_at")
  // relation fields
  NotificationLogs NotificationLogs @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  UserReceive      User             @relation(fields: [userReceiveId], references: [id], onDelete: Cascade)

  @@map("notification_logs_with")
}
